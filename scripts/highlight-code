#!/usr/bin/env python3

import os
import re
import sys

qual = r'(?:[\w\[\]]+::)*'

code_patterns = [

    r'//.*',                                                                                   # comment (skip)
    r'^\[.*\]$',                                                                               # note (skip)
    r'^&quot;',                                                                                # note (skip)
    r'^#include',                                                                              # include (skip)
    r'(?:namespace|public|protected|private)\b',                                               # namespace or access (skip)
    r'template &lt;[^&;]*&gt;$',                                                               # template parameters (skip)
    r'(?:[A-Za-z]\w*, )+[A-Za-z]\w*,?$',                                                       # enum values (skip)
    r'^\w+;?(?: *//|$)',                                                                       # single word (skip)
    r'.+ -&gt; ',                                                                              # class hierarchy (skip)
    r'#define ([A-Z][A-Z0-9_]+)',                                                              # preprocessor
    r'using ' + qual + r'(\w+)',                                                               # using declaration
    r'using namespace ' + qual + r'(\w+)',                                                     # using directive
    r'(?:template &lt;.+&gt; )?using ' + qual + r'(\w+) =',                                    # type alias
    r'enum(?: class)? (\w+)',                                                                  # enum type
    r'\w+(?: += .+)?,?(?: +//.*)?$',                                                           # enum values (skip)
    r'\w+ \[.+\]',                                                                             # annotated enum value (skip)
    r'(?:\[?abstract\]? )?(?:template (?:&lt;.*&gt; )?)?(?:class|struct) ' + qual + r'(\w+)',  # class or struct
    r'(?:[^()]+ )?(operator&quot;&quot; _\w+)\(',                                              # literal operator
    r'(?:[^()]+ )?' + qual + r'(operator(?:[!%*+,/<=>^|~-]|&[a-z]+;)+)\(',                     # operator
    r'(?:[^()]+ )?' + qual + r'(operator(?:\(\)|\[\]))\(',                                     # operator
    r'(?:[^()]+ )?' + qual + r'(operator \w+)\(',                                              # conversion operator
    r'(?:[^()#]+ )?(?:std::function&lt;.+\)&gt; )?' + qual + r'(\w+(?: ## \w+)*)\(',           # function
    r'std::function&lt;.+&gt; (\w+)\(',                                                        # function
    r'^(?:static )?const(?:expr)? \[?(?:\w|[ &*:;<>])+\]? ' + qual + r'(\w+(?: ## \w+)*)',     # constant
    r'^(\w+) = [+-]?\d+',                                                                      # constant
    r'\w+ ' + qual + r'(\w+)( ?\[.+\])?$',                                                     # variable
    r'(?:virtual )?' + qual + r'(~\w+)\(',                                                     # destructor
    r'^([A-Z]\w+)&lt;[^&;]*&gt;$',                                                             # metafunction short form

]

code_regexes = [re.compile(pat) for pat in code_patterns]
direct_io = os.fstat(0) == os.fstat(1)
unhandled = []

if direct_io:
    def alert(text): return '\x1b[38;5;208m' + text + '\x1b[0m'
else:
    def alert(text): return text

def highlight(text):
    for reg in code_regexes:
        match = reg.match(text)
        if match:
            try:
                result = text[:match.start(1)]
                result += '<strong>'
                result += match.group(1)
                result += '</strong>'
                result += text[match.end(1):]
                return result
            except IndexError:
                return text
    unhandled.append(text)
    return text

for file in sys.argv[1:]:

    with open(file, 'r', encoding='utf-8') as f:
        source = f.read()

    result = ''
    precode_pattern = re.compile(r'(<li><code(?: class="c\+\+")?>)([^<>]+)(</code>|$)')
    docitem_pattern = re.compile(r'^(\s*)([^<>]*\w[^<>]*)$')
    pos = 0

    while True:
        precode = precode_pattern.search(source, pos)
        if not precode:
            result += source[pos:]
            break
        result += source[pos:precode.start()]
        result += precode.group(1)
        lines = precode.group(2).splitlines()
        for line in lines:
            docitem = docitem_pattern.match(line)
            if docitem and docitem.group(2):
                result += docitem.group(1)
                result += highlight(docitem.group(2))
            else:
                result += line
        result += precode.group(3)
        pos = precode.end()

    with open(file, 'w', encoding='utf-8', newline='\n') as f:
        f.write(result)

for line in unhandled:
    print('   ', alert(line))
